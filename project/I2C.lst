C51 COMPILER V6.02  I2C                                                                    10/28/2019 14:04:14 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\I2C.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\I2C.c DEBUG OBJECTEXTEND PRINT(.\I2C.lst) OBJECT(.\I2C.obj) 

stmt level    source

   1          #include "I2C.h"
   2          #include "PORT.h"
   3          #include "Main.h"
   4          #include <stdio.h>
   5          
   6          #define CLOCK_CONTINUE (0)
   7          #define CLOCK_STOP (1)
   8          #define I2C_FREQ (25000UL)
   9          #define I2C_RELOAD ((uint16_t)(65536-((OSC_FREQ)/(OSC_PER_INST*I2C_FREQ*2UL))))
  10          #define I2C_RELOAD_H (I2C_RELOAD/256UL)
  11          #define I2C_RELOAD_L (I2C_RELOAD%256UL)
  12          
  13          
  14          void I2C_clock_start(void)
  15          {
  16   1        //16b timer mode
  17   1        TMOD &= 0x0F;
  18   1        TMOD |= 0x10;
  19   1        ET1 = 0;
  20   1        TH1 = I2C_RELOAD_H;
  21   1        TL1 = I2C_RELOAD_L;
  22   1        TF1 = 0;
  23   1        TR1 = 1;
  24   1      }
  25          
  26          void I2C_clock_delay(uint8_t control)
  27          {
  28   1        if(TR1 == 1)
  29   1        {
  30   2          while(TF1 == 0);
  31   2        }
  32   1      
  33   1        TR1 = 0;
  34   1        if(control == CLOCK_CONTINUE)
  35   1        {
  36   2          TH1 = I2C_RELOAD_H;
  37   2          TL1 = I2C_RELOAD_L;
  38   2          TF1 = 0;
  39   2          TR1 = 1;
  40   2        }
  41   1      }
  42          
  43          uint8_t get_ACK()
  44          {
  45   1        uint8_t sent_bit;
  46   1        // Get the ACK
  47   1        I2C_clock_delay(CLOCK_CONTINUE);
  48   1        SCL=0;
  49   1        SDA=1; // make input
  50   1        I2C_clock_delay(CLOCK_CONTINUE);
  51   1        SCL=1;
  52   1        while(SCL!=1);
  53   1        // verify ACK
  54   1        sent_bit = SDA;
  55   1        if(sent_bit != 0) return I2C_ERROR_NACK;
C51 COMPILER V6.02  I2C                                                                    10/28/2019 14:04:14 PAGE 2   

  56   1        return I2C_COMM_OK;
  57   1      }
  58          
  59          void send_ACK()
  60          {
  61   1        I2C_clock_delay(CLOCK_CONTINUE);
  62   1        SCL=0;
  63   1        SDA=0;
  64   1        I2C_clock_delay(CLOCK_CONTINUE);
  65   1        SCL=1;
  66   1        while(SCL!=1);
  67   1      }
  68          
  69          void send_NACK()
  70          {
  71   1        I2C_clock_delay(CLOCK_CONTINUE);
  72   1        SCL=0;
  73   1        SDA=1;
  74   1        I2C_clock_delay(CLOCK_CONTINUE);
  75   1        SCL=1;
  76   1        while(SCL!=1);
  77   1      }
  78          
  79          void send_STOP()
  80          {
  81   1        I2C_clock_delay(CLOCK_CONTINUE);
  82   1        SCL=0;
  83   1        SDA=0;
  84   1        I2C_clock_delay(CLOCK_CONTINUE);
  85   1        SCL=1;
  86   1        while(SCL!=1);
  87   1        SDA=1;
  88   1      }
  89          
  90          uint8_t send_byte(uint8_t send_val)
  91          {
  92   1        uint8_t num_bits, send_bit, sent_bit;
  93   1        num_bits = 8;
  94   1        do
  95   1        {
  96   2          I2C_clock_delay(CLOCK_CONTINUE);
  97   2          SCL=0;
  98   2          num_bits--;
  99   2          send_bit=((send_val>>num_bits)&0x01); // shift to get next bit and mask off
 100   2          SDA=(bit)send_bit;
 101   2      
 102   2          I2C_clock_delay(CLOCK_CONTINUE);
 103   2          SCL=1;
 104   2          while(SCL!=1); // wait for SCL to be '1'
 105   2          // verify signal matches what was written to SDA
 106   2          sent_bit=SDA; // read
 107   2          if(sent_bit != send_bit) return I2C_ERROR_BUS_BUSY;
 108   2        }while(num_bits>0);
 109   1        return get_ACK();
 110   1      }
 111          
 112          uint8_t I2C_write(uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t
             - *data_array)
 113          {
 114   1      
 115   1        uint8_t return_val, send_val;
 116   1        uint16_t index;
C51 COMPILER V6.02  I2C                                                                    10/28/2019 14:04:14 PAGE 3   

 117   1        SDA=1;
 118   1        SCL=1;
 119   1        // device addr + int addr + data
 120   1        num_bytes = num_bytes + int_addr_sz;
 121   1        if((SCL!=1) || (SDA!=1)) return I2C_ERROR_BUS_BUSY;
 122   1        I2C_clock_start();
 123   1        send_val = device_addr<<1;
 124   1        send_val &= 0xFE; // clear LSB (R/W bit)
 125   1        // create start condition
 126   1        SDA=0;
 127   1      
 128   1        // send device addr
 129   1        return_val = send_byte(send_val);
 130   1        if(return_val != I2C_COMM_OK)
 131   1        {
 132   2            I2C_clock_delay(CLOCK_STOP);
 133   2            return return_val;
 134   2        }
 135   1      
 136   1        for(index = 0; index < num_bytes; index++)
 137   1        {
 138   2          if(index < int_addr_sz)
 139   2          {
 140   3            send_val = (int_addr >> (8*index))&0xFF;
 141   3          }
 142   2          else
 143   2          {
 144   3            send_val = data_array[index-int_addr_sz];
 145   3          }
 146   2          // Send and get ACK
 147   2          return_val = send_byte(send_val);
 148   2          if(return_val != I2C_COMM_OK)
 149   2          {
 150   3              I2C_clock_delay(CLOCK_STOP);
 151   3              return return_val;
 152   3          }
 153   2        }
 154   1        send_STOP();
 155   1        I2C_clock_delay(CLOCK_STOP);
 156   1        return I2C_COMM_OK;
 157   1      
 158   1      }
 159          
 160          uint8_t I2C_read(uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t 
             -*data_array)
 161          {
 162   1      
 163   1        uint8_t return_val, send_val, rcv_val, rcv_bit, num_bits;
 164   1        uint16_t index;
 165   1        return_val = I2C_COMM_OK;
 166   1        I2C_write(device_addr, int_addr, int_addr_sz, 0, data_array);
 167   1      
 168   1        SDA=1;
 169   1        SCL=1;
 170   1        if((SCL!=1) || (SDA!=1)) return I2C_ERROR_BUS_BUSY;
 171   1        I2C_clock_start();
 172   1      
 173   1        send_val = device_addr<<1;
 174   1        send_val |= 0x01; // set LSB (R/W bit)
 175   1      
 176   1        // create start condition
 177   1        SDA=0;
C51 COMPILER V6.02  I2C                                                                    10/28/2019 14:04:14 PAGE 4   

 178   1      
 179   1        // send device address
 180   1        return_val = send_byte(send_val);
 181   1        if(return_val != I2C_COMM_OK)
 182   1        {
 183   2          I2C_clock_delay(CLOCK_STOP);
 184   2          return return_val;
 185   2        }
 186   1      
 187   1        // send bytes
 188   1        for(index = 0; index < num_bytes; index++)
 189   1        {
 190   2          num_bits = 8;
 191   2          rcv_val = 0;
 192   2          while(num_bits > 0)
 193   2          {
 194   3            num_bits--;
 195   3            I2C_clock_delay(CLOCK_CONTINUE);
 196   3            SCL=0;
 197   3            SDA=1;
 198   3            I2C_clock_delay(CLOCK_CONTINUE);
 199   3            SCL=1;
 200   3            while(SCL!=1);
 201   3            rcv_bit = SDA;
 202   3            rcv_val |= (rcv_bit)<<num_bits;
 203   3          }
 204   2          data_array[index] = rcv_val;
 205   2          if(index == num_bytes - 1)
 206   2          {
 207   3            send_NACK(); // no more bytes
 208   3          }
 209   2          else
 210   2          {
 211   3            send_ACK(); // more bytes
 212   3          }
 213   2        }
 214   1      
 215   1        send_STOP();
 216   1        I2C_clock_delay(CLOCK_STOP);
 217   1        return I2C_COMM_OK;
 218   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    546    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
